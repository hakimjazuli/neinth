{
	// official `neinth.code-snippets` for `vscode`
	"neinth Path": {
		"scope": "javascript",
		"prefix": ">>Neinth_Path",
		"body": ["neinthInstance"],
		"description": "neinth Path"
	},
	"generate Neinth Configs": {
		"scope": "javascript",
		"prefix": ">>Neinth_Config",
		"body": [
			"// @ts-check",
			"",
			"import { Neinth } from 'Neinth';",
			"",
			"/**",
			" * @description",
			" * ${1:}",
			" */",
			"export class ${TM_FILENAME_BASE/^([^.]*)\\.?.*/$1/} {",
			"\t${2:// class definition}",
			"}",
			"",
			"/**",
			" * @type {Neinth<",
			" * ${3:returnedValue},",
			" * ${4:sharedType}",
			" * >}",
			" */",
			"const neinthInstance = new Neinth(async function () {",
			"\treturn ${TM_FILENAME_BASE/^([^.]*)\\.?.*/$1/}",
			"});",
			"export default neinthInstance;"
		],
		"description": "generate Neinth Configs"
	},
	"generate Neinth Module": {
		"scope": "javascript",
		"prefix": ">>Neinth_Module",
		"body": [
			"// @ts-check",
			"",
			"import { Neinth } from 'Neinth';",
			"",
			"/**",
			" * @type {Neinth<",
			" * ${1:returnedValue},",
			" * ${2:sharedType}",
			" * >}",
			" */",
			"const neinthInstance = new Neinth(async function () {",
			"\t${3:// Neinth code here}",
			"\t${4:// return value to be importable via `listenToNeinth`}",
			"});",
			"export default neinthInstance;"
		],
		"description": "generate Neinth Module"
	},
	"Neinth Watcher": {
		"scope": "javascript",
		"prefix": ">>Neinth_Watcher",
		"body": [
			"// @ts-check",
			"",
			"import { NeinthWatcher } from 'neinth';",
			"",
			"export default new NeinthWatcher({",
			"\trelativePath: '/${1:watchPath}',",
			"\taddDirToSet: ${2:true},",
			"\taddFileToSet: ${3:true},",
			"\tencoding: '${4:utf-8}',",
			"});"
		],
		"description": "Neinth Watcher"
	},
	"Neinth UpdateValue": {
		"scope": "javascript",
		"prefix": ">>Neinth_UpdateValue",
		"body": [
			"this.updateValue({",
			"\tneinthInstance,",
			"\tmode: '${2:}',",
			"\tvalue: ${3:},",
			"});"
		],
		"description": "Neinth UpdateValue"
	},
	"Neinth UpdateValue$": {
		"scope": "javascript",
		"prefix": ">>Neinth_UpdateValue$",
		"body": [
			"this.updateValue$({",
			"${1:\tneinthInstance,",
			"\tmode:'${2:}',",
			"\tderived:async({onBefore$})=>{",
			"\t\t${0:// code}",
			"\t}",
			"})"
		],
		"description": "Neinth UpdateValue$"
	},
	"Neinth Worker": {
		"scope": "javascript",
		"prefix": ">>Neinth_Worker",
		"body": [
			"// @ts-check",
			"",
			"import { NeinthWorker } from 'neinth';",
			"",
			"/**",
			" * @type {NeinthWorker<",
			" * ${1:ExpectedParameter},",
			" * ${2:ExpectedReturn}",
			" * >}",
			" */",
			"new NeinthWorker(async (${3:parameter}) => {",
			"\treturn ${4:returns};",
			"});"
		],
		"description": "Neinth Worker"
	},
	"get Shared": {
		"scope": "javascript",
		"prefix": ">>Neinth_GetShared",
		"body": ["const ${1:varName} = this.getSharedData(neinthInstance);"],
		"description": "get Shared"
	},
	"set Shared": {
		"scope": "javascript",
		"prefix": ">>Neinth_SetShared",
		"body": ["const ${1:varName} = this.SetSharedData(neinthInstance, ${2:newValue});"],
		"description": "set Shared"
	}
}
