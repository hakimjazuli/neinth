{
	// Place your neinth workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"generate neinth module": {
		"scope": "javascript",
		"prefix": ">>neinth_module",
		"body": [
			"// @ts-check",
			"",
			"import { neinth } from 'neinth';",
			"",
			"export default new neinth(async ({ ${1:} }) => {",
			"\t${0:// code}",
			"});"
		],
		"description": "generate neinth module"
	},
	"generate neinth configs": {
		"scope": "javascript",
		"prefix": ">>neinth_config",
		"body": [
			"// @ts-check",
			"",
			"import { neinth } from 'neinth';",
			"",
			"export class ${1:configName} {",
			"\t/**",
			"\t* @param {Object} p0",
			"\t* @param {string} [p0.argExample]",
			"\t*/",
			"\tconstructor({ argExample }) {",
			"\t\tthis.argExample = argExample;",
			"\t}",
			"}",
			"",
			"export default new neinth(async () => {",
			"\treturn ${1:configName};",
			"});"
		],
		"description": "generate neinth configs"
	}
}
